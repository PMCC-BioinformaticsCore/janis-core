

### top level ###
?the_text   : part+

?part   : javascript
        | text

javascript  : "$(" expr ")"
            | "${" expr "}"
TEXT        : /[^$(]+/
text        : TEXT

### higher level constructs ###
?expr   : return_ifelse
        | return_inline
        | ternary
        | group
        | two_value
        | math
        | method_call 
        | function_call
        | attribute
        | group
        | runtime
        | input
        | self
        | primitive  # may cause issues?


### logical ###
ternary         : expr "?" expr ":" expr
return_ifelse   : "if" expr "{" "return" expr ";" "}" "else" "{" "return" expr ";" "}"
return_inline   : "return" expr ";"?
                | "return" "(" expr ")" ";"?

group   :  "(" expr ")"
# TODO NOT OPERATOR
# TODO ISDEFINED OPERATOR?
# TODO ASSERTNOTNULL OPERATOR?

?math   : "Math.floor(" expr ")" -> floor
        | "Math.ceil(" expr ")"  -> ceil
        | "Math.round(" expr ")" -> round

?two_value  : expr "&&" expr    -> and
            | expr "||" expr    -> or
            | expr "===" expr   -> deep_eq
            | expr "!==" expr   -> deep_ineq
            | expr "==" expr    -> eq
            | expr "!=" expr    -> ineq
            | expr ">=" expr    -> gteq
            | expr "<=" expr    -> lteq
            | expr ">" expr     -> gt
            | expr "<" expr     -> lt
            | expr "+" expr     -> add
            | expr "-" expr     -> sub
            | expr "*" expr     -> mul
            | expr "/" expr     -> div


### objects, attributes, methods ###
input   : "inputs." SYMBOL
self    : "self"
runtime : "runtime.outdir"      -> rt_outdir
        | "runtime.outdirSize"  -> rt_outdir_size
        | "runtime.tmpdir"      -> rt_tmpdir
        | "runtime.tmpdirSize"  -> rt_tmpdir_size
        | "runtime.cores"       -> rt_cores
        | "runtime.ram"         -> rt_ram

?attribute  : expr ".basename"   -> attr_basename
            | expr ".dirname"    -> attr_dirname
            | expr ".nameroot"   -> attr_nameroot
            | expr ".nameext"    -> attr_nameext
            | expr ".size"       -> attr_size
            | expr ".contents"   -> attr_contents
            | expr ".length"     -> attr_length

?method_call: expr ".join(" method_args ")"     -> meth_join
            | expr ".slice(" method_args ")"    -> meth_slice
            | expr ".split(" method_args ")"    -> meth_split
            | expr ".flat()"                    -> meth_flat
            | expr "[" SIGNED_NUMBER "]"        -> meth_index
            | expr ".replace(" method_args ")"  -> meth_replace
            | expr ".toString()"                -> meth_tostr

            # TODO: 
            # meth_filter
            # meth_map

?method_args: primitive                             
            | primitive ARGSEP primitive                
            | primitive ARGSEP primitive ARGSEP primitive   

?function_call  : "parseInt(" expr ")"  -> func_parseint

ARGSEP     : /, *?/


### primitives ###
?primitive  : TRUE          
            | FALSE         
            | NULL          
            | SIGNED_NUMBER 
            | QUOTED_STRING 
            | REGEX         
            | SYMBOL        

TRUE    : /true/
FALSE   : /false/
NULL    : /null/
REGEX   : /\/[\s\S]*?\/[a-z]?/
SYMBOL  : /[a-zA-Z0-9_]+/

_STRING_INNER: /.*?/
_STRING_QUOT_INNER: _STRING_INNER /(?<!\\)(\\\\)*?/ 
QUOTED_STRING : ( "\"" _STRING_QUOT_INNER "\"" ) | ( "'" _STRING_QUOT_INNER "'" )

%import common.SIGNED_NUMBER
%import common.WS
%ignore WS


